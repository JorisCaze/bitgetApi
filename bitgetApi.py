import hmac
import base64
import json
from datetime import datetime
import typing
import requests
from enum import Enum

API_URL = "https://api.bitget.com"

class METHOD(Enum):
    GET = "GET"
    POST = "POST"

class BitgetApi():
    
    # -------------------------------------------------------------
    
    def __init__(self, apiKey: str, secretKey: str, password: str):
        
        """
        Initialize a BitgetApi object.
        The official documentation is available at https://www.bitget.com/api-doc/common/intro
        For more information regarding the API setup, see https://www.bitget.com/api-doc/common/quick-start

        Parameters
        ----------
        apiKey : str
            The identity of API transactions, generated by a random algorithm.
        secretKey : str
            The private key is randomly generated by the system and used for signature generation.
        password : str
            The password is set by the user. It should be noted that if you forgot it, it cannot be retrieved back, and the API key needs to be recreated.
        """
        self.apiKey = apiKey
        self.secretKey = secretKey
        self.password = password

    # -------------------------------------------------------------

    def _getTimestamp(self):
        return str(int(datetime.now().timestamp() * 1000))
    
    # -------------------------------------------------------------
    
    def _generateUrl(self, requestPath: str) -> str:
        return API_URL + requestPath
    
    # -------------------------------------------------------------

    def _generateHeaders(self, timestamp: str, signature: str) -> typing.Dict:

        headers = {
            "ACCESS-KEY": self.apiKey,
            "ACCESS-SIGN": signature,
            "ACCESS-PASSPHRASE": self.password,
            "ACCESS-TIMESTAMP": str(timestamp),
            "locale": "en-US",
            "Content-Type": "application/json"
        }

        return headers
    
    # -------------------------------------------------------------

    def _preHash(self, 
                 timestamp: str, 
                 method: METHOD, 
                 requestPath: str, 
                 body: str):
        return str(timestamp) + method.value + requestPath + body
    
    # -------------------------------------------------------------

    def _sign(self, message: str):

        signature = base64.b64encode(
            hmac.new(
                self.secretKey.encode('utf-8'),
                message.encode('utf-8'),
                digestmod='sha256'
            ).digest()
        ).decode('utf-8')
        
        return signature
    
    # -------------------------------------------------------------

    def _generateSignature(self, 
                           timestamp: str, 
                           method: METHOD,
                           requestPath: str,
                           body: str):
        '''Generate request signature as specified by API, for
        more details see (https://www.bitget.com/api-doc/common/signature).
        '''
        
        message = self._preHash(
            timestamp=timestamp, 
            method=method, 
            requestPath=requestPath, 
            body=body)
        
        return self._sign(message)

    # -------------------------------------------------------------

    def _parseParamsToStr(self, params):
        '''Parse request parameters to str with alphabetical sorting
        (required by API).
        '''

        params = [(key, val) for key, val in params.items()]
        params.sort(key=lambda x: x[0])
        url = '?' + self._convertParamToQuery(params)
        if url == '?':
            return ''
        return url

    # -------------------------------------------------------------

    def _convertParamToQuery(self, params: typing.List):
        url = ''
        for key, value in params:
            url = url + str(key) + '=' + str(value) + '&'
        return url[0:-1]
    
    # -------------------------------------------------------------

    def getRequest(self, 
                   endpoint: str, 
                   parameters: typing.Dict  = {}):
        """
        Sends a GET request to the specified endpoint with the given parameters.

        Parameters
        ----------
        endpoint : str
            The API endpoint to send the GET request to (e.g. '/api/v2/public/time').
        parameters : typing.Dict, optional
            A dictionary of query string parameters to include in the request URL.

        Returns
        -------
        str
            The response from the server, formatted as a JSON string.
        """

        # GET request does not have a body
        # Input data is managed using query strings (URL parameters)

        timestamp = self._getTimestamp()

        requestPath = endpoint + self._parseParamsToStr(parameters)

        signature = self._generateSignature(
            timestamp=timestamp,
            method=METHOD.GET,
            requestPath=requestPath,
            body='')

        url = self._generateUrl(requestPath)
        headers = self._generateHeaders(
            timestamp=timestamp, 
            signature=signature)

        try:
            r = requests.get(
                url, 
                headers=headers)
            
            text = r.text
            json_data = json.loads(text)

            return json.dumps(json_data, indent=2) 

        except Exception as e:
            print('An error occurred.')
            print(e)

    # -------------------------------------------------------------

    def postRequest(self, 
                   endpoint: str, 
                   parameters: typing.Dict):
        """
        Make a POST request to the API.
        
        Parameters
        ----------
        endpoint : str
            The endpoint of the API to be called (e.g. '/api/v2/mix/order/place-order')
        parameters : typing.Dict
            The parameters to be sent to the API (aka the payload).
        
        Returns
        -------
        str
            The JSON response from the API.
        """
        
        # In POST request, data is sent to the server in the body
        # To have uniform UX for the user, input data is still named 'parameters'
        
        timestamp = self._getTimestamp()

        requestPath = endpoint

        # Convert body to JSON string
        jsonBody = json.dumps(parameters)

        # There is no parameters for POST requests
        # Input data is managed using JSON body
        signature = self._generateSignature(
            timestamp=timestamp,
            method=METHOD.POST,
            requestPath=requestPath,
            body=jsonBody)

        url = self._generateUrl(endpoint)
        headers = self._generateHeaders(
            timestamp=timestamp, 
            signature=signature)

        try:
            r = requests.post(
                url, 
                headers=headers,
                data=jsonBody)
            
            text = r.text
            json_data = json.loads(text)

            return json.dumps(json_data, indent=2) 

        except Exception as e:
            print('An error occurred.')
            print(e)

    # -------------------------------------------------------------